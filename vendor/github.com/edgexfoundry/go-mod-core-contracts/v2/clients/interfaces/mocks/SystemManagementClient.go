// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/edgexfoundry/go-mod-core-contracts/v2/dtos/common"

	errors "github.com/edgexfoundry/go-mod-core-contracts/v2/errors"

	mock "github.com/stretchr/testify/mock"

	requests "github.com/edgexfoundry/go-mod-core-contracts/v2/dtos/requests"
)

// SystemManagementClient is an autogenerated mock type for the SystemManagementClient type
type SystemManagementClient struct {
	mock.Mock
}

// DoOperation provides a mock function with given fields: ctx, reqs
func (_m *SystemManagementClient) DoOperation(ctx context.Context, reqs []requests.OperationRequest) ([]common.BaseResponse, errors.EdgeX) {
	ret := _m.Called(ctx, reqs)

	var r0 []common.BaseResponse
	if rf, ok := ret.Get(0).(func(context.Context, []requests.OperationRequest) []common.BaseResponse); ok {
		r0 = rf(ctx, reqs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.BaseResponse)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, []requests.OperationRequest) errors.EdgeX); ok {
		r1 = rf(ctx, reqs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: ctx, services
func (_m *SystemManagementClient) GetConfig(ctx context.Context, services []string) ([]common.BaseWithConfigResponse, errors.EdgeX) {
	ret := _m.Called(ctx, services)

	var r0 []common.BaseWithConfigResponse
	if rf, ok := ret.Get(0).(func(context.Context, []string) []common.BaseWithConfigResponse); ok {
		r0 = rf(ctx, services)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.BaseWithConfigResponse)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, []string) errors.EdgeX); ok {
		r1 = rf(ctx, services)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// GetHealth provides a mock function with given fields: ctx, services
func (_m *SystemManagementClient) GetHealth(ctx context.Context, services []string) ([]common.BaseWithServiceNameResponse, errors.EdgeX) {
	ret := _m.Called(ctx, services)

	var r0 []common.BaseWithServiceNameResponse
	if rf, ok := ret.Get(0).(func(context.Context, []string) []common.BaseWithServiceNameResponse); ok {
		r0 = rf(ctx, services)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.BaseWithServiceNameResponse)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, []string) errors.EdgeX); ok {
		r1 = rf(ctx, services)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}

// GetMetrics provides a mock function with given fields: ctx, services
func (_m *SystemManagementClient) GetMetrics(ctx context.Context, services []string) ([]common.BaseWithMetricsResponse, errors.EdgeX) {
	ret := _m.Called(ctx, services)

	var r0 []common.BaseWithMetricsResponse
	if rf, ok := ret.Get(0).(func(context.Context, []string) []common.BaseWithMetricsResponse); ok {
		r0 = rf(ctx, services)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.BaseWithMetricsResponse)
		}
	}

	var r1 errors.EdgeX
	if rf, ok := ret.Get(1).(func(context.Context, []string) errors.EdgeX); ok {
		r1 = rf(ctx, services)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.EdgeX)
		}
	}

	return r0, r1
}
